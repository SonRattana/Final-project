generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text

  server    Server[]
  members   Member[]
  channels  Channel[]
  notifications Notification[] // Relation to Notification
  reactions Reaction[] // Relation to Reaction (new)

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Server {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String    @db.Text
  inviteCode String   @unique

  profileId String
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members   Member[]
  channels  Channel[]

  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id                      String   @id @default(uuid())
  role                    MemberRole @default(GUEST)

  profileId               String
  profile                 Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId                String
  server                  Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages                Message[]
  directMessages          DirectMessage[]

  conversationsInitiated  Coversation[] @relation("MemberOne")
  conversationsReceived   Coversation[] @relation("MemberTwo")

  createdAt               DateTime @default(now())
  updateAt                DateTime @updatedAt

  @@index ([profileId])
  @@index ([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String   @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  server    Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id               String    @id @default(uuid())
  content          String    @db.Text
  fileUrl          String?   @db.Text

  memberId         String
  member           Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId        String
  channel          Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  replyToMessageId String?   // New field for replies
  replyTo          Message?  @relation("MessageReplies", fields: [replyToMessageId], references: [id])
  replies          Message[] @relation("MessageReplies")

  deleted          Boolean   @default(false)

  taggedUsers      String[] 

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  reactions        Reaction[] // Relation to reactions

  @@index([channelId])
  @@index([memberId])
}

model Reaction {
  id        String   @id @default(uuid())
  emoji     String
  count     Int      @default(1)
  
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  profileId String   
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade) 

  @@unique([messageId, emoji, profileId])  
}

model Coversation {
  id              String   @id @default(uuid())

  memberOneId     String
  memberOne       Member   @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId     String
  memberTwo       Member   @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages  DirectMessage[]

  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id              String   @id @default(uuid())
  content         String   @db.Text
  fileUrl         String?  @db.Text

  memberId        String
  member          Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId  String
  conversation    Coversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  channelId String   // Add channelId

  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
